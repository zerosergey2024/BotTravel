import logging
import os
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram import Router, F
from aiogram.client.session.aiohttp import AiohttpSession  # –ò–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–∫—Å–∏
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from openai import AsyncOpenAI
from dotenv import load_dotenv
from aiogram.types import FSInputFile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PROXY_API_KEY = os.getenv("PROXY_API_KEY")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
bot = Bot(token=TELEGRAM_BOT_TOKEN)
router = Router()
dp = Dispatcher()

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
BASE_DIR = "/–≤–∞—à_username/BotTravel"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—É—Ç—å
DOWNLOADS_DIR = os.path.join(BASE_DIR, "downloads")
IMG_DIR = os.path.join(BASE_DIR, "img")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
os.makedirs(DOWNLOADS_DIR, exist_ok=True)
os.makedirs(IMG_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = AsyncOpenAI(
    api_key=PROXY_API_KEY,
    base_url="https://api.proxyapi.ru/openai/v1",
)

BASE_WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"

user_data = {}


def process_text_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


@router.message(F.content_type == "document")
async def handle_docs(message: Message):
    if not message.document.file_name.endswith('.txt'):
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).")
        return

    file_info = await bot.get_file(message.document.file_id)
    file_name = file_info.file_path.split('/')[-1]
    file_path = os.path.join(DOWNLOADS_DIR, f"{message.from_user.id}_{file_name}")

    try:
        downloaded_file = await bot.download_file(file_info.file_path)
        with open(file_path, "wb") as new_file:
            if hasattr(downloaded_file, 'getvalue'):
                new_file.write(downloaded_file.getvalue())
            else:
                new_file.write(downloaded_file.read())

        content = process_text_file(file_path)
        if content is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
            return

        user_id = message.from_user.id
        user_data.setdefault(user_id, {"knowledge": "", "instructions": ""})

        if "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" in file_name.lower():
            user_data[user_id]["instructions"] = content
            await message.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        elif "–±–∞–∑–∞" in file_name.lower():
            user_data[user_id]["knowledge"] = content
            await message.answer("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


@router.message(Command("start"))
async def start_command(message: Message):
    photo_path = os.path.join(IMG_DIR, '–§–æ—Ç–æ–ë–æ—Ç1.jpg')

    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∏ –¥–µ–ª–∞—Ö.",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
                             reply_markup=main_keyboard())

class Form(StatesGroup):
    weather = State()
    translate = State()

def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞"))
    builder.add(types.KeyboardButton(text="üåç –ü–µ—Ä–µ–≤–æ–¥"))
    return builder.as_markup(resize_keyboard=True)

def cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())

@router.message(F.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞")
async def weather_handler(message: Message, state: FSMContext):
    await state.set_state(Form.weather)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=cancel_keyboard()
    )

@router.message(F.text == "üåç –ü–µ—Ä–µ–≤–æ–¥")
async def translate_handler(message: Message, state: FSMContext):
    await state.set_state(Form.translate)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=cancel_keyboard()
    )

@router.message(Form.weather)
async def get_weather(message: Message, state: FSMContext):
    city = message.text
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BASE_WEATHER_URL}?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            ) as response:
                data = await response.json()

                if response.status != 200:
                    await message.answer(f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return

                weather = data["weather"][0]["description"].capitalize()
                temp = data["main"]["temp"]
                humidity = data["main"]["humidity"]
                wind = data["wind"]["speed"]

                response_text = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                    f"{weather}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üçÉ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
                )

                await message.answer(response_text)
    except Exception as e:
        logging.error(f"Weather error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")
    finally:
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@router.message(Form.translate)
async def translate_text(message: Message, state: FSMContext):
    text = message.text
    try:
        completion = await client.chat.completions.create(
            model="gpt-3.5-turbo-1106",
            messages=[
                {"role": "system", "content": "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª."},
                {"role": "user", "content": text}
            ]
        )
        translation = completion.choices[0].message.content
        await message.answer(f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n{translation}")
    except Exception as e:
        logging.error(f"Translation error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
    finally:
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@router.message()
async def handle_message(message: Message):
    try:
        completion = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."},
                {"role": "user", "content": message.text}
            ],
            temperature=0.7,
            max_tokens=500
        )
        await message.answer(completion.choices[0].message.content)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_BOT_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)

    asyncio.run(main())
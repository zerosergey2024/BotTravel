import logging
import os
import aiohttp
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from openai import AsyncOpenAI
from dotenv import load_dotenv
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).parent
DATA_DIR = os.path.abspath(os.path.join(os.getcwd(), "data"))
DOWNLOADS_DIR = os.path.abspath(os.path.join(os.getcwd(), "downloads"))

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
BASE_WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN:
    logging.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)
else:
    logging.info("‚úÖ TELEGRAM_BOT_TOKEN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

if not API_KEY:
    logging.error("‚ùå API_KEY (–¥–ª—è OpenAI/Groq) –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

if not WEATHER_API_KEY:
    logging.warning("‚ö†Ô∏è WEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–∏–ª–∏ Groq / Ollama)
client = AsyncOpenAI(
    api_key=API_KEY,
    base_url="https://api.openai.com/v1",  # –î–ª—è OpenAI
    # base_url="https://api.groq.com/openai/v1",  # –î–ª—è Groq
    # base_url="http://localhost:11434/v1",       # –î–ª—è Ollama
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def restore_user_data():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    for file_name in os.listdir(DATA_DIR):
        if not file_name.endswith('.txt'):
            continue
        try:
            parts = file_name.replace('.txt', '').split('_')
            if len(parts) != 2:
                continue
            data_type, user_id_str = parts
            user_id = int(user_id_str)
            file_path = os.path.join(DATA_DIR, file_name)
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            if user_id not in user_data:
                user_data[user_id] = {"knowledge": "", "instruction": ""}
            user_data[user_id][data_type] = content
            logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id={user_id}, type={data_type}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ {file_name}: {e}")

def save_user_data(user_id: int, data_type: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
    if not content.strip():
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    file_path = os.path.join(DATA_DIR, f"{data_type}_{user_id}.txt")
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
        logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {file_path}: {e}")

def load_user_data(user_id: int, data_type: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
    file_path = os.path.join(DATA_DIR, f"{data_type}_{user_id}.txt")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {file_path}")
            return content
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    return ""

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞"),
        types.KeyboardButton(text="üåç –ü–µ—Ä–µ–≤–æ–¥"),
        types.KeyboardButton(text="‚ùì –°–ø—Ä–æ—Å–∏—Ç—å")
    )
    return builder.as_markup(resize_keyboard=True)

def cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

# --- FSM States ---
class Form(StatesGroup):
    weather = State()
    translate = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start_command(message: Message):
    photo_path = BASE_DIR / "img" / "–§–æ—Ç–æ–ë–æ—Ç1.jpg"
    if photo_path.exists():
        photo = FSInputFile(str(photo_path))
        await message.answer_photo(
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_keyboard()
        )

@dp.message(F.document)
async def handle_document(message: Message):
    if not message.document.file_name.endswith('.txt'):
        await message.answer("‚ö† –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)")
        return

    try:
        file_info = await bot.get_file(message.document.file_id)
        file_name = f"{message.from_user.id}_{file_info.file_path.split('/')[-1]}"
        file_path = Path(DOWNLOADS_DIR) / file_name
        await bot.download_file(file_info.file_path, destination=file_path)

        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read().strip()

        if not content:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return

        user_id = message.from_user.id
        filename = message.document.file_name.lower()

        if "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" in filename:
            data_type = "instruction"
            reply_text = "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        elif "–±–∞–∑–∞" in filename:
            data_type = "knowledge"
            reply_text = "‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        else:
            await message.answer("‚ö† –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' –∏–ª–∏ '–±–∞–∑–∞'.")
            return

        if user_id not in user_data:
            user_data[user_id] = {"knowledge": "", "instruction": ""}
        user_data[user_id][data_type] = content
        save_user_data(user_id, data_type, content)

        await message.answer(reply_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")

@dp.message(Command("instruction"))
async def show_instruction(message: Message):
    user_id = message.from_user.id
    instruction = user_data.get(user_id, {}).get("instruction", "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    await message.answer(f"–í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n{instruction}")

@dp.message(Command("knowledge"))
async def show_knowledge(message: Message):
    user_id = message.from_user.id
    knowledge = user_data.get(user_id, {}).get("knowledge", "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    await message.answer(f"–í–∞—à–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{knowledge}")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())

@dp.message(F.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞")
async def weather_handler(message: Message, state: FSMContext):
    await state.set_state(Form.weather)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=cancel_keyboard())

@dp.message(F.text == "üåç –ü–µ—Ä–µ–≤–æ–¥")
async def translate_handler(message: Message, state: FSMContext):
    await state.set_state(Form.translate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=cancel_keyboard())

@dp.message(F.text == "‚ùì –°–ø—Ä–æ—Å–∏—Ç—å")
async def ask_handler(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö:", reply_markup=cancel_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã ---
@dp.message(Form.weather)
async def get_weather(message: Message, state: FSMContext):
    city = message.text
    if not WEATHER_API_KEY:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
        return

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BASE_WEATHER_URL}?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            ) as response:
                data = await response.json()
                if response.status != 200:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    return

                weather = data["weather"][0]["description"].capitalize()
                temp = data["main"]["temp"]
                humidity = data["main"]["humidity"]
                wind = data["wind"]["speed"]

                response_text = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                    f"{weather}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üçÉ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
                )
                await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")
    finally:
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
@dp.message(Form.translate)
async def translate_text(message: Message, state: FSMContext):
    text = message.text
    system_prompt = "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."

    await ai_response(message, system_prompt, text)
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–æ—Ç–≤–µ—Ç ---
async def ai_response(message: Message, system_prompt: str, user_text: str):
    try:
        completion = await client.chat.completions.create(
            model="gpt-3.5-turbo",  # –∏–ª–∏ "llama3-8b-8192" –¥–ª—è Groq, "llama3" –¥–ª—è Ollama
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ],
            temperature=0.7,
            max_tokens=500
        )
        response_text = completion.choices[0].message.content
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text)
async def handle_ai_query(message: Message):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
    if any(keyword in text for keyword in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate", "–Ω–∞ —Ä—É—Å—Å–∫–æ–º", "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]):
        await translate_text(message, None)  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context = user_data.get(user_id, {})
    instruction = user_context.get("instruction", "")
    knowledge = user_context.get("knowledge", "")

    system_prompt = "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–≥–∏–¥ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ."

    if instruction:
        system_prompt += f" –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {instruction}"
    if knowledge:
        system_prompt += f" –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {knowledge}"

    await ai_response(message, system_prompt, message.text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    dp.include_router(router)
    restore_user_data()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())